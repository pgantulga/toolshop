{
  "version": 3,
  "sources": ["../../@hookform/resolvers/joi/src/joi.ts"],
  "sourcesContent": ["import { appendErrors, FieldError } from 'react-hook-form';\nimport { toNestError, validateFieldsNatively } from '@hookform/resolvers';\nimport type { ValidationError } from 'joi';\nimport { Resolver } from './types';\n\nconst parseErrorSchema = (\n  error: ValidationError,\n  validateAllFieldCriteria: boolean,\n) =>\n  error.details.length\n    ? error.details.reduce<Record<string, FieldError>>((previous, error) => {\n        const _path = error.path.join('.');\n\n        if (!previous[_path]) {\n          previous[_path] = { message: error.message, type: error.type };\n        }\n\n        if (validateAllFieldCriteria) {\n          const types = previous[_path].types;\n          const messages = types && types[error.type!];\n\n          previous[_path] = appendErrors(\n            _path,\n            validateAllFieldCriteria,\n            previous,\n            error.type,\n            messages\n              ? ([] as string[]).concat(messages as string[], error.message)\n              : error.message,\n          ) as FieldError;\n        }\n\n        return previous;\n      }, {})\n    : {};\n\nexport const joiResolver: Resolver =\n  (\n    schema,\n    schemaOptions = {\n      abortEarly: false,\n    },\n    resolverOptions = {},\n  ) =>\n  async (values, context, options) => {\n    const _schemaOptions = Object.assign({}, schemaOptions, {\n      context,\n    });\n\n    let result: Record<string, any> = {};\n    if (resolverOptions.mode === 'sync') {\n      result = schema.validate(values, _schemaOptions);\n    } else {\n      try {\n        result.value = await schema.validateAsync(values, _schemaOptions);\n      } catch (e) {\n        result.error = e;\n      }\n    }\n\n    if (result.error) {\n      return {\n        values: {},\n        errors: toNestError(\n          parseErrorSchema(\n            result.error,\n            !options.shouldUseNativeValidation &&\n              options.criteriaMode === 'all',\n          ),\n          options,\n        ),\n      };\n    }\n\n    options.shouldUseNativeValidation && validateFieldsNatively({}, options);\n\n    return {\n      errors: {},\n      values: result.value,\n    };\n  };\n"],
  "mappings": ";;;;;;;;;;;AAKA,IA+BaA,IACX,SACEC,IACAC,GAGAC,GAAAA;AAAoB,SAAA,WAHpBD,MAAAA,IAAgB,EACdE,YAAAA,MAAY,IAAA,WAEdD,MAAAA,IAAkB,CAAE,IAAA,SAEfE,GAAQC,GAASC,GAAAA;AAAW,QAAA;AAAA,UAAAC,IAAAA,WAAAA;AAgBjC,eAAIC,EAAOC,QACF,EACLL,QAAQ,CAAA,GACRM,QAAQC,GAzDdF,KA2DUD,EAAOC,OA1DjBG,KAAAA,CA2DWN,EAAQO,6BACkB,UAAzBP,EAAQQ,cA1DpBL,GAAMM,QAAQC,SACVP,GAAMM,QAAQE,OAAmC,SAACC,GAAUT,IAAAA;AAC1D,cAAMU,KAAQV,GAAMW,KAAKC,KAAK,GAAA;AAM9B,cAJKH,EAASC,EAAAA,MACZD,EAASC,EAAAA,IAAS,EAAEG,SAASb,GAAMa,SAASC,MAAMd,GAAMc,KAAAA,IAGtDX,IAA0B;AAC5B,gBAAMY,KAAQN,EAASC,EAAAA,EAAOK,OACxBC,KAAWD,MAASA,GAAMf,GAAMc,IAAAA;AAEtCL,cAASC,EAAAA,IAASO,aAChBP,IACAP,IACAM,GACAT,GAAMc,MACNE,KACK,CAAA,EAAgBE,OAAOF,IAAsBhB,GAAMa,OAAAA,IACpDb,GAAMa,OAAAA;UAEb;AAED,iBAAOJ;QACT,GAAG,CAAA,CAAA,IACH,CAAE,IAmCEZ,CAAAA,EAAAA,KAKNA,EAAQO,6BAA6Be,EAAuB,CAAA,GAAItB,CAAAA,GAEzD,EACLI,QAAQ,CAAA,GACRN,QAAQI,EAAOqB,MAAAA;AAzEI,YACvBpB,IACAG;MAwEI,GAlCIkB,IAAiBC,OAAOC,OAAO,CAAA,GAAI/B,GAAe,EACtDI,SAAAA,EAAAA,CAAAA,GAGEG,IAA8B,CAAA,GAAGyB,KAAAA,WAAAA;AAAAA,YACR,WAAzB/B,EAAgBgC;AAClB1B,cAASR,GAAOmC,SAAS/B,GAAQ0B,CAAAA;aAAgBM;AAAAA,cAAAA,IAAAA,SAAAA,IAAAA,GAAAA;AAAAA,gBAAAA;AAAAA,kBAAAA,KAAAA,GAAAA;YAAAA,SAAAA,IAAAA;AAAAA,qBAAAA,EAAAA,EAAAA;YAAAA;AAAAA,mBAAAA,MAAAA,GAAAA,OAAAA,GAAAA,KAAAA,QAAAA,CAAAA,IAAAA;UAAAA,EAAAC,WAAAA;AAE7CC,mBAAAA,QAAAC,QACmBvC,GAAOwC,cAAcpC,GAAQ0B,CAAAA,CAAAA,EAAeW,KAAA,SAAAC,IAAAA;AAAjElC,gBAAOqB,QAAKa;YAAsD,CAAA;UACnE,GAAQC,SAAAA,IAAAA;AACPnC,cAAOC,QAAQkC;UAChB,CAAA;AAAAP,cAAAA,KAAAA,EAAAK;AAAAA,mBAAAL,EAAAK,KAAA,WAAA;YAAA,CAAA;QAAA;MAAA,EAAA;AAAA,aAAAH,QAAAC,QAAAN,MAAAA,GAAAQ,OAAAR,GAAAQ,KAAAlC,CAAAA,IAAAA,EAAAA,CAAAA;IAuBL,SAACoC,GAAAA;AAAAA,aAAAL,QAAAM,OAAAD,CAAAA;IAAA;EAAA;AAAA;",
  "names": ["joiResolver", "schema", "schemaOptions", "resolverOptions", "abortEarly", "values", "context", "options", "_temp3", "result", "error", "errors", "toNestError", "validateAllFieldCriteria", "shouldUseNativeValidation", "criteriaMode", "details", "length", "reduce", "previous", "_path", "path", "join", "message", "type", "types", "messages", "appendErrors", "concat", "validateFieldsNatively", "value", "_schemaOptions", "Object", "assign", "_temp2", "mode", "validate", "_temp", "_catch", "Promise", "resolve", "validateAsync", "then", "_schema$validateAsync", "e", "reject"]
}
